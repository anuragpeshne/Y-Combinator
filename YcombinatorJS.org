#+TITLE: Y Combinator
#+OPTIONS: ^:{}
* Recursive function definition using 位
#+BEGIN_VERSE
Is it possible to recursively call an anonymous function?
#+END_VERSE
** A Recursive function to calculate factorial
#+BEGIN_SRC javascript
function fact(n) {
    if (n == 0)
        return 1;
    else
        return n * fact(n - 1);
}
#+END_SRC
#+BEGIN_VERSE
Since we are not allowed to use named functions, we cannot have /function fact(.../
#+END_VERSE
#+BEGIN_VERSE
Let's start with the simplest case which we can write using anonymous function (位),
we'll try to build upon it to re-write above factorial function using 位.
#+END_VERSE
** fact_{0}
#+BEGIN_SRC javascript
function (n) {
    if (n == 0)
        return 1;
    else
        return n * eternity(n-1);
#+END_SRC
where /eternity/ is function which loops eternally if called.
#+BEGIN_SRC javascript
function eternity(x) {
    return eternity(x);
}
#+END_SRC
#+BEGIN_VERSE
Note that we are now using a 位; the function itself, however, is not much of use
since it cannot compute factorial for number greater than 0.
#+END_VERSE
#+BEGIN_VERSE
Now, let's try to write /fact_{1}/. Recall that
#+END_VERSE
#+BEGIN_CENTER
1! = 1 \times 0!
#+END_CENTER
*** fact_{\leq1}
#+BEGIN_VERSE
Since we already have a function which can calculate /0!/, we can easily use that
to compute factorial for any number /\leq1/
#+END_VERSE
#+BEGIN_SRC javascript
function (n) {
    if (n == 0)
        return 1;
    else
        return n * (function (n) {
                        if (n == 0)
                            return 1;
                        else
                            return n * eternity(n-1)
                    })(n - 1);
}
#+END_SRC
#+BEGIN_VERSE
We can similarly try to write /fact_{2}/ which can calculate factorial for numers /\leq2/
#+END_VERSE
*** fact_{\leq2}
#+BEGIN_SRC javascript
function (n) {
    if (n == 0)
        return 1;
    else
        return n * (function (n) {
                        if (n == 0)
                            return 1;
                        else
                            return n * (function (n) {
                                            if (n == 0)
                                                return 1;
                                            else
                                                return n * eternity(n-1)
                                        })(n - 1);
                    })(n - 1);
}
#+END_SRC
** The Nineth Commandment
Using the nineth commandment from the [[https://mitpress.mit.edu/books/little-schemer][Book]].
#+begin_center
*Nineth Commandment* \\
Abstract common patterns with a new function
#+end_center
*** fact_{0}
Let's abstract out the repetetive function out of the function and pass it as argument.
#+BEGIN_SRC javascript
(function (fact) {
     return function (n) {
                if (n == 0)
                    return 1;
                else
                    return n * fact(n - 1);
            };
 })(eternity);
#+END_SRC
*** fact_{\leq1}
#+BEGIN_SRC javascript
(function (fact) {
     return function (n) {
                if (n == 0)
                    return 1;
                else
                    return n * fact(n - 1);
            };
 })(function (fact) {
        return function (n) {
                   if (n == 0)
                       return 1;
                   else
                       return n * fact(n - 1);
               };
        })(eternity);
#+END_SRC
*** fact_{\leq2}
#+BEGIN_SRC javascript
(function (fact) {
     return function (n) {
                if (n == 0)
                    return 1;
                else
                    return n * fact(n - 1);
            };
 })(function (fact) {
        return function (n) {
                   if (n == 0)
                       return 1;
                   else
                       return n * fact(n - 1);
               };
        })(function (fact) {
               return function (n) {
                          if (n == 0)
                              return 1;
                          else n * fact(n - 1);
                      };
           })(eternity);
#+END_SRC
#+BEGIN_VERSE
This didn't really helped us. Now /function (fact).../ is repeating.
Let's try to remove the repetition and write a function which /makes/ fact.
#+END_VERSE
** make_fact
*** fact_{0}
#+BEGIN_SRC javascript
(function (mk_fact) {
     return mk_fact(eternity);
 })(function (fact) {
        return function (n) {
            if (n == 0)
                return 1;
            else
                return n * fact(n - 1);
        };
    });
#+END_SRC
*** fact_{\leq1}
#+BEGIN_SRC javascript
(function (mk_fact) {
     return mk_fact(mk_fact(eternity));
 })(function (fact) {
        return function (n) {
            if (n == 0)
                return 1;
            else
                return n * fact(n - 1);
        }
    });
#+END_SRC
*** fact_{\leq2}
#+BEGIN_SRC javascript
(function (mk_fact) {
     return mk_fact(mk_fact(mk_fact(eternity)));
 })(function (fact) {
        return function (n) {
            if (n == 0)
                return 1;
            else
                return n * fact(n - 1);
        }
    });
#+END_SRC
#+BEGIN_VERSE
This removes most of the repetition, still we have to apply /mk_fact/ again and again.
Let's try to remove that.
#+END_VERSE
*** mk_fact_{\leq \infty}
#+BEGIN_SRC javascript
(function (mk_fact) {
     return mk_fact(mk_fact);
 })(function (mk_fact) {
        return function (n) {
            if (n == 0)
                return 1;
            else
                return n * (mk_fact(mk_fact))(n - 1);
        }
    });
#+END_SRC
#+BEGIN_VERSE
We now have a function which computes factorial for any /n/.
However, our function /fact/ doesn't look like original /fact/. It now calls /make_fact/
instead to /fact/. Let's try to fix that.
#+END_VERSE
** fact
*** fact_{\leq \infty}: /attempt 1/
#+BEGIN_SRC javascript
(function (mk_fact) {
     return mk_fact(mk_fact);
 })(function (mk_fact) {
        return (function (fact) {
                    return function (n) {
                               if (n == 0)
                                   return 1;
                               else
                                   return n * fact(n - 1);
                           };
                })(mk_fact(mk_fact));
    });
#+END_SRC
#+BEGIN_VERSE
This change now restores our /fact/ function back to the original one, but it introduces another problem.
Now we are not returning a function, instead we are returning function application, which calls itself again.
=> /infinite loop/
#+END_VERSE
*** fact_{\leq \infty}: /attempt 2/
Defer the application of function until called from inside of /fact/
#+BEGIN_SRC javascript
(function (mk_fact) {
     return mk_fact(mk_fact);
 })(function (mk_fact) {
        return (function (fact) {
                    return function (n) {
                               if (n == 0)
                                   return 1;
                               else
                                   return n * fact(n - 1);
                           };
                })(function (n) {
                       return (mk_fact(mk_fact))(n);
                   });
    });
#+END_SRC
** Y Combinator
Extracting the body of /factorial/ out:
#+BEGIN_SRC javascript
(function (fa) {
    return (function (mk_fact) {
                return mk_fact(mk_fact);
            })(function (mk_fact) {
                   return fa(function (n) {
                                 return (mk_fact(mk_fact))(n);
                             });
               })
 })(function (fact) {
        return function (n) {
                   if (n == 0)
                       return 1;
                   else
                       return n * fact(n - 1);
               };
    });
#+END_SRC
And finally fitering out /fact/, since this was never about /fact/
#+BEGIN_SRC javascript
var Y = function (le) {
    return (function (f) {
                return f(f);
            })(function (f) {
                   return le(function (n) {
                                 return (f(f))(n);
                             });
               })
}
#+END_SRC
And thus, we can define recursive anonymous functions:
#+BEGIN_SRC javascript
fact = Y(function(fact) {
             return function(n) {
                        if (n == 0)
                            return 1;
                        else
                            return n * fact(n - 1);
                    }
         })
#+END_SRC
